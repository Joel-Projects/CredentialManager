import logging

from flask_login import current_user
from flask_restplus_patched import Resource
from flask_restplus._http import HTTPStatus

from app.extensions import db
from app.extensions.api import Namespace, abort
from app.extensions.api.parameters import PaginationParameters
from app.modules.users import permissions

from . import parameters, schemas
from .models import {{ model_name }}

log = logging.getLogger(__name__)
api = Namespace('{{ module_namespace }}', description='{{ module_title }}')

@api.route('/')
@api.login_required()
class {{ module_title.replace(' ', '') }}(Resource):

    @api.parameters(PaginationParameters())
    @api.response(schemas.Base{{ model_name }}Schema(many=True))
    def get(self, args):
        '''
        List of {{ model_name }}.

        Returns a list of {{ model_name }} starting from ``offset`` limited by ``limit``
        parameter.
        '''
        return {{ model_name }}.query.offset(args['offset']).limit(args['limit'])

    @api.login_required()
    @api.parameters(parameters.Create{{ model_name }}Parameters())
    @api.response(schemas.Detailed{{ model_name }}Schema())
    @api.response(code=HTTPStatus.CONFLICT)
    def post(self, args):
        '''
        Create a new instance of {{ model_name }}.
        '''
        with api.commit_or_abort(db.session, default_error_message='Failed to create a new {{ model_name }}'):
            {{ module_name_singular }} = {{ model_name }}(**args)
            db.session.add({{ module_name_singular }})
        return {{ module_name_singular }}


@api.route('/<int:{{ module_name_singular }}_id>')
@api.login_required()
@api.response(code=HTTPStatus.NOT_FOUND,description='{{ model_name }} not found.')
@api.resolveObjectToModel({{model_name}}, '{{ module_name_singular }}')
class {{ model_name }}ByID(Resource):
    '''
    Manipulations with a specific {{ model_name }}.
    '''

    @api.response(schemas.Detailed{{ model_name }}Schema())
    def get(self, {{ module_name_singular }}):
        '''
        Get {{ model_name }} details by ID.
        '''
        return {{ module_name_singular }}

    @api.login_required()
    @api.permission_required(permissions.WriteAccessPermission())
    @api.parameters(parameters.Patch{{ model_name }}DetailsParameters())
    @api.response(schemas.Detailed{{ model_name }}Schema())
    @api.response(code=HTTPStatus.CONFLICT)
    def patch(self, args, {{ module_name_singular }}):
        '''
        Patch {{ model_name }} details by ID.
        '''
        with api.commit_or_abort(db.session, default_error_message='Failed to update {{ model_name }} details.'):
            parameters.Patch{{ model_name }}DetailsParameters.perform_patch(args, obj={{ module_name_singular }})
            db.session.merge({{ module_name_singular }})
        return {{ module_name_singular }}

    @api.login_required()
    @api.permission_required(permissions.WriteAccessPermission())
    @api.response(code=HTTPStatus.CONFLICT)
    @api.response(code=HTTPStatus.NO_CONTENT)
    def delete(self, {{ module_name_singular }}):
        '''
        Delete a {{ model_name }} by ID.
        '''
        with api.commit_or_abort(db.session, default_error_message='Failed to delete the {{ model_name }}.'):
            db.session.delete({{ module_name_singular }})
        return None
